scala interpreter		scala
scala compiler			scalac

expression				program text that can be evaluated/run by Scala,
						main component of a Scala program,
						exists at compile time,
						evaluates to/has a value,
						has a type (determined a compile time), 
						identifier: type = value , eg. res0: String = HELLO WORLD!
value					information stored in memory
						exists at runtime
						is an object
type					an expression has a type, a value does not
						exists at compile time, not at runtime	
statements				do not have a value / result ??? eg. println(<arg>)
commands				:<command>
:paste					enter multiple lines; paste contents of file to console 
:type1					print type of expression, don't evaluate
Unit					scala equivalent of void

Trait
Object
Class

compile time			1. syntactically correct, 2. type checking
runtime
compile time and runtime errors

type erasure			When a program type checks, Scala guarantees that all values are used consistently and thus it does not need to record type information in a value’s
						representation. This process of removing type information is called type erasure
type system
object					grouping a methods and fields
Infix Operator Notation	Any Scala expression written a.b(c) can also be written a b c.
literal expression		evaluates to a fixed value that stands “for itself”

Types:
Number					Int (42), Double (42.0), Float (42.0f), Long (42L)     (,Short, Byte)
Boolean					true, false
Char					'a'
String					"abc"
Null 					null
Unit					()

declaration				kind of SCala program, binding names to values. 
						Declarations are different to expressions. They do not evaluate to a value and do not have a type.
fields					fields refer to values stored within an object
methods					methods refer to computations that produce values








