
https://www.manning.com/books/functional-programming-in-scala

scala interpreter		scala
scala compiler			scalac

expression				program text that can be evaluated/run by Scala,
						main component of a Scala program,
						exists at compile time,
						evaluates to/has a value,
						has a type (determined a compile time), 
value					information stored in memory
						exists at runtime
						is an object
type					an expression has a type, a value does not
						exists at compile time, not at runtime
						abstracts over values (eg. 1, 2, 3 are Ints)

identifier: type = value , eg. res0: String = HELLO WORLD!

statements				do not have a value / result ??? eg. println(<arg>)
commands				:<command>
:paste					enter multiple lines; paste contents of file to console 
:type					print type of expression, don't evaluate

Trait

compile time			1. syntactically correct, 2. type checking
runtime
compile time and runtime errors

type erasure			When a program type checks, Scala guarantees that all values are used consistently and thus it does not need to record type information in a value�s
						representation. This process of removing type information is called type erasure
type system

Infix Operator Notation	Any Scala expression written a.b(c) can also be written a b c.
literal expression		evaluates to a fixed value that stands 'for itself'

TYPES:
=====
Number					Int (42), Double (42.0), Float (42.0f), Long (42L)     (,Short, Byte)
Boolean					true, false
Char					'a'
String					"abc"
Null 					null
Unit					(), scala equivalent of void
Any                     grand supertype of all Scala types
Nothing                 Nothing is a subtype of every other type, throw-expressions
Null, Nothing           These special types are subtypes of everything else

declaration				kind of SCala program, binding names to values. 
						Declarations are different to expressions. They do not evaluate to a value and do not have a type.
fields					fields refer to values stored within an object
methods					methods refer to computations that produce values

val vs. var             immutable vs. mutable fields

METHOD FOR CREATING METHODS
===========================
1. Identify the Input and Output
2. Prepare Test Cases
3. Write the Declaration
4. Run the Code
5. Write the Body
5.1 Consider the Result Type
5.2 Consider the Input Type
6. Run the Code, Again

compound expressions:
conditionals
blocks                  The type and value of a block is that of the last expression in the block.

expressions             evaluate to values
declarations            give names to values

object					grouping of methods and fields
                        a value
class                   template for an object
                        allows us to create many objects with the same Type
                        not a value
                        binds a name to ...
                        'lives' in a namespace

substitution model

Keyword Parameters      are robust to changes in the number and order of parameters
method chaining         new Counter(10).inc.dec.inc.inc.count
method overloading

functions               objects representing computations
types                   the way we properly abstract across values
companion object        To define a companion object for a class, in the same file as the class, define an object with the same name.
                        Companion objects replace Java’s static methods.
Scala has two namespaces: the namespace of values and the namespace of types

eq                      test for reference identity
==, equals              test if  all field values are equal?

CASE CLASSES
============
Features of a case class:
1. A field for each constructor argument
2. A default toString method
3. Sensible equals, and hashCode methods that operate on the field values in the object
4. A copy method that creates a new object with the same field values as the current one

Features of a case class companion object
1. contains an apply method with the same arguments as the class constructor
2. contains code to implement an extractor pattern for use in pattern matching

case object             use instead of case class with no constructor arguments
                        defines a class and an object, and makes the object an instance (actually the only instance) of the class
                        With a case object we still get all of the functionality defined for case classes


PATTERN MATCHING
================
A pattern can be one of:
1. a name, binding any value to that name;
2. an underscore, matching any value and ignoring it;
3. a literal, matching the value the literal denotes; or
4. a constructor-style pattern for a case class.

algebraic datatype      a description of data
structural recursion    mechanically write code that transforms an algebraic datatype

Traits                  are templates for creating classes, in the same way that classes are templates for creating objects
                        traits allow us to express that multiple classes share a common super-type

It is good practice to never define vals in a trait, but rather to use def.

Sealed trait            When we mark a trait as sealed we must define all of its subtypes in the same file.
                        If all the subtypes of a trait are known, seal the trait
                        Consider making subtypes final if there is no case for extending them
                        Remember subtypes must be defined in the same file as a sealed trait.

Pattern:

sealed trait TraitName { ... }
final case class Name(...) extends TraitName

The main advantages of this pattern are:
1. the compiler will warn if we miss a case in pattern matching; and
2. we can control extension points of sealed traits and thus make stronger guarantees about the behaviour of subtypes.

s"...... ${varname} ....."    is called 'string interpolation'


ALGEBRAIC DATA TYPES
====================
algebraic data types    sum and product types,
                        The sum and product type patterns tell us how to combine data to make bigger data
Product Type Pattern    “A has a B and C”
                        “has-a and”
                        implememtations:
                            case class A(b: B, c: C)
                            trait A {def b: B; def c: C}
Sum Type Pattern        "A is a B or C" (and nothing else!)
                        "is-a or"
(implememtation:

sealed trait A
final case class B() extends A
final case class C() extends A

)

Algebraic Data Types    An algebraic data type is any data that uses the above two patterns.

Patterns:               implementation
1. is-a or              => sum type pattern
2. is-a and             => trait that extends multiple other traits
3. has-a or             => combination of sum and product type pattern
4. has-a and            => product type pattern



STRUCTURAL RECURSION
====================
structural recursion    pattern for using algebraic data types, 2 variants:
                        - polymorphism
                        - pattern matching

Structural recursion says that if we have an A as defined before (case class A(b: B, c: C)),
we must break it into its constituent B and C that we then combine in some way to get closer to our desired answer.

Structural recursion is essentially the process of breaking down data into smaller pieces.

Just as we have two patterns for building algebraic data types, we will have two patterns for decomposing them using
structural recursion. We will actually have two variants of each pattern, one using polymorphism, which is the typical
object-oriented style, and one using pattern matching, which is typical functional style.

Polymorphism
Polymorphic dispatch, or just polymorphism for short, is a fundamental object-oriented technique. If we define a
method in a trait, and have different implementations in classes extending that trait, when we call that method the
implementation on the actual concrete instance will be used


STRUCTURAL RECURSION PATTERNS:

1. POLYMORPHISM (OO-style):
1.1 The Product Type Polymorphism Pattern
=========================================
case class A(b: B, c: C) {
  def f: F = ???
}

1.2 The Sum Type Polymorphism Pattern
=====================================
sealed trait A {
  def f: F
}
final case class B() extends A {
  def f: F =
    ???
}
final case class C() extends A {
  def f: F =
    ???
}

2 PATTERN MATCHING (FP-style):
2.1 The Product Type Pattern Matching Pattern
=============================================
def f(a: A): F =
  a match {
    case A(b, c) => ???
  }

2.2 The Sum Type Pattern Matching Pattern
=========================================
def f(a: A): F =
  a match {
    case B() => ???
    case C() => ???
  }

The general rule is: if a method only depends on other fields and methods in a class it is a good candidate to be
implemented inside the class. If the method depends on other data (for example, if we needed a Cook to make dinner)
consider implementing it using pattern matching outside of the classes in question. If we want to have more than one
implementation we should use pattern matching and implement it outside the classes.

tail call       A tail call is a method call where the *CALLER* immediately returns the value

def method1: Int =
  1

def tailCall: Int =
  method1

def notATailCall: Int =
  method1 + 2

GENERICS AND FUNCTIONS
======================
generics    : abstract over types
functions   : abstract over methods ==> reduce duplication of code
              unlike methods, a function is a value
              just like a value, a function has a type, syntax: (A, B, ...) => C

type parameter      : A in the following code is called the type parameter

sealed trait Result[A]
case class Success[A](result: A) extends Result[A]
case class Failure[A](reason: String) extends Result[A]

Type Parameter Syntax
=====================
case class Name[A](...){ ... }
trait Name[A]{ ... }
def name[A](...){ ... }

Invariant Generic Sum Type Pattern
==================================
If A of type T is a B or C write

sealed trait A[T]
final case class B[T]() extends A[T]
final case class C[T]() extends A[T]

Functions
=========
Function literals           eg: (x: Int) => x + 1
                            (parameter: type, ...) => expression
                            also called anonymous functions

The pattern matching implementations benefited from fold as we remove the duplication in the pattern matching.
In general a fold makes a good interface for users outside the class, but not necessarily for use inside the class.

base case           : case that ends recursion

Folds
=====
Fold is just an adaptation of structural recursion where we allow the user to pass in the functions we apply at
each case. As structural recursion is the generic pattern for writing any function that transforms an algebraic
datatype, fold is the concrete realisation of this generic pattern. That is, fold is the generic transformation
or iteration method. Any function you care to write on an algebraic datatype can be written in terms of fold.

Fold Pattern
============
For an algebraic datatype A, fold converts it to a generic type B. Fold is a structural recursion with:

one function parameter for each case in A;
each function takes as parameters the fields for its associated class;
if A is recursive, any function parameters that refer to a recursive field take a parameter of type B.
The right-hand side of pattern matching cases, or the polymorphic methods as appropriate, consists of calls
to the appropriate function.


Placeholder syntax                  : (_: Int) * 2 is expanded by the compiler to (a: Int) => a * 2
convert method calls to functions   : simply follow a method with an underscore, eg.
                                      (Sum.sum_) // res: (Int, Int) => Int = <function2>
Multiple Parameter Lists            : def example(x: Int)(y: Int) = x + y
                                      example(1)(2) // res: Int = 3

GENERIC IMPLEMENTATION OF PRODUCT TYPE
======================================
Pairs
Tuples      : Tuple1[A] through to Tuple22[A, B, C, ...]
              sugared form: (A, B, C, ...)
              fields are called _1, _2, _3, etc

SUM, GENERIC IMPLEMENTATION OF SUM TYPE
=======================================
sealed trait Sum[A,B]
final case class Left[A,B](value: A) extends Sum[A,B]
final case class Right[A,B](value: B) extends Sum[A,B]

Scala API: Either

OPTIONS / GENERIC OPTIONAL VALUES
=================================
sealed trait Maybe[A]
final case class Full[A](value: A) extends Maybe[A]
final case class Empty[A]() extends Maybe[A]

Scala API: Option

Many expressions may sometimes produce a value and sometimes not.
If we can encode an optional value in the type system, the compiler will force us to consider the case where a
value is not available, thus increasing the robustness of our code.


Map
===
Examples:
We have a List[Int] and a function Int => User, and we want to get a List[User]
we have a Maybe[User] and a function User => Order, and we want a Maybe[Order].
We have a Sum[String, Order] and a function Order => Double, and we want Sum[String, Double]

What these all have in common is we have a type F[A] and a function A => B, and we want a result F[B].
The method that performs this operation is called map.

sealed trait LinkedList[A] {
  def map[B](fn: A => B): LinkedList[B] =
    this match {
      case Pair(hd, tl) => Pair(fn(hd), tl.map(fn))
      case End() => End[B]()
    }
}

FlatMap
=======
Examples:
We have LinkedList[User] and a function User => LinkedList[Order], and we want LinkedList[Order].
we have Maybe[User] and User => Maybe[Order], and we want Maybe[Order].
We have Sum[String, Order] and a function Order => Sum[String, Id], and we want Sum[String, Id].

What these all have in common is we have a type F[A] and a function A => F[B], and we want a result F[B].
The method that performs this operation is called flatMap.

sealed trait Maybe[A] {
  def flatMap[B](fn: A => Maybe[B]): Maybe[B] =
    this match {
      case Full(v) => fn(v)
      case Empty() => Empty[B]()
    }
}
final case class Full[A](value: A) extends Maybe[A]
final case class Empty[A]() extends Maybe[A]

Functors and Monads
===================
A type like F[A] with a map method is called a functor.
If a functor also has a flatMap method it is called a monad.

There is a little bit more to being a functor or monad. For a monad we require a constructor, typically
called point, and there are some algebraic laws that our map and flatMap operations must obey.

The general idea is a monad represents a value in some context. The context depends on the monad we’re using.
We’ve seen examples where the context is:

an optional value, such as we might get when retrieving a value from a database;
an sum of values, which might represent a error message and a value we’re computing with; and
a list of values.

We use map when we want to transform the value within the context to a new value, while keeping the context the same.
We use flatMap when we want to transform the value and provide a new context.

VARIANCE
========
Invariance, Covariance, and Contravariance
If we have some type Foo[A], and A is a subtype of B, is Foo[A] a subtype of Foo[B]?
:
* A type Foo[T] is invariant in terms of T, meaning that the types Foo[A] and Foo[B] are unrelated regardless of the
relationship between A and B. This is the default variance of any generic type in Scala.

* A type Foo[+T] is covariant in terms of T, meaning that Foo[A] is a supertype of Foo[B] if A is a supertype of B.
Most Scala collection classes are covariant in terms of their contents.

* A type Foo[-T] is contravariant in terms of T, meaning that Foo[A] is a subtype of Foo[B] if A is a supertype of B.
The only example of contravariance that I am aware of is function arguments.



VARIANCE AND FUNCTIONS
======================
!! Functions are contravariant in terms of their arguments and covariant in terms of their return type.

Consider some code that expects a Function1[A, B]:

class Box[A](value: A) {
  /** Apply `func` to `value`, returning a `Box` of the result. */
  def map[B](func: Function1[A, B]): Box[B] =
    Box(func(a))
}
To understand variance, consider what functions can we safely pass to this map method:
*) A function from A to B is clearly ok.
*) A function from A to a subtype of B is ok because it’s result type will have all the properties of B that we might
    depend on. This indicates that functions are covariant in their result type.
*) A function expecting a supertype of A is also ok, because the A we have in the Box will have all the properties
    that the function expects.
*) A function expecting a subtype of A is not ok, because our value may in reality be a different subtype of A.
    (A in the Box may have less properties than we need)

COVARIANT GENERIC SUM TYPE PATTERN
==================================
If A of type T is a B or C, and C is not generic, write

sealed trait A[+T]
final case class B[T](t: T) extends A[T]
final case object C extends A[Nothing]

This pattern extends to more than one type parameter. If a type parameter is not needed for a specific case of a
sum type, we can substitute Nothing for that parameter.

NB: Nothing is a subtype of every other type!


CONTRAVARIANT POSITION PATTERN
==============================
Back to flatMap, the function f is a parameter, and thus in a contravariant position.
This means we accept supertypes of f.

If A of a covariant type T and a method f of A complains that T is used in a contravariant position,
introduce a type TT >: T in f.

case class A[+T] {
  def f[TT >: T](t: TT): A[TT]
}

TYPE BOUNDS
===========
A <: Type       A is a subtype of Type
A >: Type       A is a supertype of Type

For example, the following type allows us to store a Visitor or any subtype:

case class WebAnalytics[A <: Visitor](
  visitor: A,
  pageViews: Int,
  searchTerms: List[String],
  isOrganic: Boolean
)

In other words:
*) [B >: A] is a lower type bound. It means that B is constrained to be a supertype of A.
*) Similarly [B <: A] is an upper type bound, meaning that B is constrained to be a subtype of A.

SEQUENCES
=========
val sequence = Seq(1, 2, 3)
// sequence: Seq[Int] = List(1, 2, 3)

The default sequences in Scala are immutable!

RULE: Any method ending with a : character becomes right associative when written as an infix operator.

In programming languages, the associativity of an operator is a property that determines how
operators of the same precedence are grouped in the absence of parentheses.
Consider the expression a ~ b ~ c.
If the operator ~ has left associativity, this expression would be interpreted as (a ~ b) ~ c.
If the operator has right associativity, the expression would be interpreted as a ~ (b ~ c)

Import statements:
=================
// `empty` is unbound here

def someMethod = {
  import scala.collection.immutable.Vector.empty

  // `empty` is bound to `Vector.empty` here
  empty[Int]
}

// `empty` is unbound again here

Iterable
========
"dog".permutations
// res: Iterator[String] = non-empty iterator
scala> "dog".permutations.toList
res3: List[String] = List(dog, dgo, odg, ogd, gdo, god)

Return types when using flatMap:
===============================
Seq(1, 2, 3).flatMap(num => Seq(num, num * 10))
// res: List[Int] = List(1, 10, 2, 20, 3, 30)
import scala.collection.immutable.Vector
Vector(1, 2, 3).flatMap(num => Seq(num, num * 10))
// res: scala.collection.immutable.Vector[Int] = Vector(1, 10, 2, 20, 3, 30)


TRAVERSAL FUNCTIONS: map, flatMap, fold, foreach
================================================

Algebra of Transformations
==========================
Method	        We have	    We provide	        We get

foreach         Seq[A]      A => Unit           Unit
map             Seq[A]      A => B              Seq[B]
flatMap         Seq[A]      A => Seq[B]         Seq[B]
foldLeft        Seq[A]      B and (B, A) => B   B
foldRight       Seq[A]      B and (A, B) => B   B

examples:
Seq(1, 2, 3).foldLeft(0)(_ + _)         (((0 + 1) + 2) + 3)
Seq(1, 2, 3).foldRight(0)(_ + _)        (1 + (2 + (3 + 0)))
List(1, 2, 3).foreach(num => println("And a " + num + "..."))

Your two steps in solving any problem with sequences should be:
1. think about the types, and
2. experiment on the REPL!

FOR COMPREHENSIONS
==================
A for comprehension is just another representation for NESTED FLATMAP calls!!

Seq(1, 2, 3).map(_ * 2)
is equivalent to
for {
  x <- Seq(1, 2, 3) // pattern <- generator expression
} yield x * 2


for {
  x <- a
  y <- b
  z <- c
} yield e
translates to:

a.flatMap(x => b.flatMap(y => c.map(z => e)))

The intuitive understanding of the code is to iterate through all of the sequences in the generators, mapping
the yield expression over every element therein, and accumulating a result of the same type as sequence fed into
the FIRST generator.

for (
  x <- a;
  y <- b;
  z <- c;
) yield e

is equivalent to

for {
  x <- a
  y <- b
  z <- c
} yield e

OPTIONS
=======
Options represent values that may or may not be present in our code. Options are an alternative to using null that
provide us with a means of chaining computations together without risking NullPointerExceptions.

def readInt(str: String): Option[Int] =
  if(str matches "\\d+") Some(str.toInt) else None

Extracting Values from Options:
1. readInt("abc").getOrElse(0)
2. readInt("123") match {
     case Some(number) => number + 1
     case None         => 0
   }
3. map and flatMap, zie *)

Options as Sequences:
One way of thinking about an Option is as a sequence of 0 or 1 elements. !!!!!

*) Although map and flatMap don’t allow us to extract values from our Options, they allow us to compose computations
together in a safe manner. If all arguments to the computation are Some, the result is a Some.
If any of the arguments are None, the result is None.

It’s worth noting that Option and Seq are also compatible in some sense. We can turn a Seq[Option[A]]
into a Seq[A] using flatMap:

Seq(readInt("1"), readInt("b"), readInt("3")).flatMap(x => x)
// res: Seq[Int] = List(1, 3)


Options as Flow Control:

val optionA = readInt("123")
val optionB = readInt("234")

for {
  a <- optionA
  b <- optionB
} yield a + b

MONAD
=====
Option is a monad that allows us to sequence computations on optional values without worrying about the fact
that they may or may not be present;

Seq is a monad that allows us to sequence computations that return multiple possible answers without worrying
about the fact that there are lots of possible combinations involved;

Future is another popular monad that allows us to sequence asynchronous computations without worrying
about the fact that they are asynchronous.

MAP
===
A Map is very much like its counterpart in Java - it is a collection that maps keys to values.
The keys must form a set and in most cases are unordered.

SET
===
Sets are unordered collections that contain no duplicate elements.
You can think of them as sequences without an order, or maps with keys and no values.

RANGE
=====
10 until 1 by -1

TYPE CLASSES
============
Type classes are a powerful feature of Scala that allow us to extend existing libraries with new functionality,
without using inheritance and without having access to the original library source code.

With type classes we can:

* plug in different implementations of an interface for a given class; and
* implement an interface without modifying existing code.

Example:
val minOrdering = Ordering.fromLessThan[Int](_ < _)
List(3, 4, 2).sorted(minOrdering)

The type class pattern separates the implementation of functionality (the type class instance, an Ordering[A]
in our example) from the type the functionality is provided for (the A in an Ordering[A]).
This is the basic pattern for type classes.

IMPLICITS
=========
It can be inconvenient to continually pass the type class instance to a method when we want to repeatedly use the
same instance. Scala provides a convenience, called an implicit value, that allows us to get the compiler to pass
the type class instance for us.

Example:
implicit val ordering = Ordering.fromLessThan[Int](_ < _)
List(2, 4, 3).sorted

Implicit values:
We can tag any val, var, object or zero-argument def with the implicit keyword,
making it a potential candidate for an implicit parameter.
An implicit value must be declared within a surrounding object, class, or trait.

Summary (so far):
In Scala, a type class is just a trait. To use a type class we:

* create implementations of that trait, called type class instances; and
* typically we mark the type class instances as implicit values.

Marking values as implicit tells the compiler it can supply them as a parameter to a method call if none is
explicitly given. For the compiler to supply a value:

1. the parameter must be marked implicit in the method declaration;
2. there must be an implicit value available of the same type as the parameter; and
3. there must be only one such implicit value available.

Type Class Instance Packaging: Companion Objects
------------------------------------------------
I) When defining a type class instance, if

*) there is a single instance for the type; and
*) you can edit the code for the type that you are defining the instance for

then define the type class instance in the companion object of the type.

II) When defining a type class instance, if

1. there is a single good default instance for the type; and
2. you can edit the code for the type that you are defining the instance for

then define the type class instance in the companion object of the type. This allows users to override the instance
by defining one in the LOCAL scope whilst still providing sensible default behaviour.

---
When packaging type class instances, if there is a single instance or a single good default we should put it in the
companion object if possible. Otherwise, one way to package implicits is to place each one in an object and require
the user to explicitly import them.

TYPE CLASS PATTERN
==================
A type class is a trait with at least one type variable. The type variables specify the concrete types the type class
instances are defined for. Methods in the trait usually use the type variables.

trait ExampleTypeClass[A] {
  def doSomething(in: A): Foo
}

We have seen the basic pattern for implementing type classes.
1. We declare some interface for the functionality we want
2. We write type class instances for each concrete class we want to use and for each different situation we want to
   use it in.

Example:

trait HtmlWriter[A] {
  def write(in: A): String
}

object PersonWriter extends HtmlWriter[Person] {
  def write(person: Person) = s"<span>${person.name} &lt;${person.email}&gt;</span>"
}

IMPLICIT PARAMETER LISTS
========================
def method[A](normalParam1: NormalType, ...)(implicit implicitParam1: ImplicitType[A], ...)

Example:

object HtmlUtil {
  def htmlify[A](data: A)(implicit writer: HtmlWriter[A]): String = {
    writer.write(data)
  }
}

If we call a method and do not explicitly supply an explicit parameter, the compiler will search for an
implicit value of the correct type and insert it as the parameter.

INTERFACES USING IMPLICIT PARAMETERS
====================================

Option 1
--------
object HtmlWriter {
  def write[A](in: A)(implicit writer: HtmlWriter[A]): String =
    writer.write(in)
}

Option 2
--------
The idea is to simply select a type class instance by type (done by the no-argument apply method) and then directly
call the methods defined on that instance.

object HtmlWriter {
  def apply[A](implicit writer: HtmlWriter[A]): HtmlWriter[A] =
    writer
}

Use, example:

HtmlWriter[Person].write(Person("Noel", "noel@example.org"))


TYPE CLASS INTERFACE PATTERN
============================
If the desired interface to a type class TypeClass is exactly the methods defined on the type class trait,
define an interface on the companion object using a no-argument apply method like

trait TypeClass[A] {
  def doSomething(in: A): Foo
}

object TypeClass {
  def apply[A](implicit instance: TypeClass[A]): TypeClass[A] =
    instance
}

IMPLICIT CLASSES
================
Scala has a feature called called implicit classes that allow us to add new functionality to an existing class
without editing its source code.

Example:

implicit class ExtraStringMethods(str: String) { /* implementtation of numberOfVowels method */ }

"the quick brown fox".numberOfVowels

When the compiler processes our call to numberOfVowels, it interprets it as a type error because there is no such
method in String. Rather than give up, the compiler attempts to fix the error by searching for an implicit class
that provides the method and can be constructed from a String. It finds ExtraStringMethods. The compiler then inserts
an invisible constructor call, and our code type checks correctly.

COMBINING TYPE CLASSES AND TYPE ENRICHMENT
==========================================
Example:

trait HtmlWriter[A] {
  def write(in: A): String
}

object PersonWriter extends HtmlWriter[Person] {
  def write(person: Person) = s"<span>${person.name} &lt;${person.email}&gt;</span>"
}

implicit class HtmlOps[T](data: T) {
  def toHtml(implicit writer: HtmlWriter[T]) =
    writer.write(data)
}

Person("John", "john@example.com").toHtml

This allows us to invoke our type-class pattern on any type for which we have an adapter as if it were a
built-in feature of the class.

CONTEXT BOUND SYNTAX
====================
A context bound is an annotation on a generic type variable like so:

[A : Context]

It expands into a generic type parameter [A] along with an implicit parameter for a Context[A].

Example:
def pageTemplate[A : HtmlWriter](body: A): String
expands to
def pageTemplate[A](body: A)(implicit writer: HtmlWriter[A]): String


IMPLICITLY
==========
The implicitly method takes no parameters but has a generic type parameters. It returns the implicit matching
the given type, assuming there is no ambiguity.

Example:

case class Example(name: String)
implicit val implicitExample = Example("implicit")

implicitly[Example]
// res: Example = Example(implicit)

implicitly[Example] == implicitExample
// res: Boolean = true

IMPLICIT CONVERSION (Don't use these!)
===================
class B {
  def bar = "This is the best method ever!"
}

class A

implicit def aToB(in: A): B = new B()

new A().bar
// res: String = This is the best method ever!

MATCHING
========
New pattern:
a: B            : matches any value of type B and binds it to a variable a





