Vanilla SBT vs Play SBT
=======================
Play is distributed in two components:
* a set of libraries used by our web applications at runtime;
* an SBT plugin that customises the default behaviour of SBT, adding and altering commands to help us build applications for the web.
This section covers the behaviour of SBT with the Play plugin activated.


SBT
===
Commands:
clean
compile
run
Watch mode:
~compile

FUNDAMENTAL CONCEPTS
====================
Actions         Actions are functions from Requests to Results
Controllers     Controllers are collections of action-producing methods
Routes          Routes map incoming Requests/URI patterns to Action-producing method calls on our Controllers.
Requests
Results

Actions
=======
Actions are objects that handle web requests. They have an apply method that accepts a play.api.mvc.Request and returns a play.api.mvc.Result. We create them using one of several apply methods on the play.api.mvc.Action companion:

import play.api.mvc.Action

Action { request =>
  Ok("Hello, world!")
}

Controllers
===========
These are singleton objects that contain action-producing methods.

Routes
======
We use routes to dispatch incoming requests to Actions. Routes choose Actions based on the HTTP method and path of the request.

GET /      controllers.HelloController.hello
GET /:name controllers.HelloController.helloTo(name: String)

Note that Actions and Controllers have different lifetimes. Controllers are created when our application boots and persist until it shuts down. Actions are created and executed in response to incoming Requests and have a much shorter lifespan. Play passes parameters from our routes to the method that creates the Action, not to the action itself.

ROUTES
======
Path parameters
---------------
GET /hello/:name            controllers.HelloController.helloTo(name: String)
GET /send/:msg/to/:user     controllers.ChatController.send(msg: String, user: String)
GET /download/*filename     controllers.DownloadController.file(filename: String)

Single-segment (or: path-segment) parameters (:par_name) match any continuous set of characters excluding forward slashes (‘/’)
Rest-style parameters (*par_name) match all remaining characters in the URI, including forward slashes.

Query parameters
----------------
# Extract `username` and `message` from the path:
GET /send/:message/to/:username         controllers.ChatController.send(message: String, username: String)
# Extract `username` and `message` from the query string:
GET /send                               controllers.ChatController.send(message: String, username: String)
# Extract `username` from the path and `message` from the query string:
GET /send/to/:username                  controllers.ChatController.send(message: String, username: String)

Optional parameters
-------------------
We sometimes want to make query string parameters optional. To do this, we just have to define them as Option types. Play will pass Some(value) if the URI contains the parameter and None if it does not.

Typed Parameters
----------------
GET /say/:msg/:n/times controllers.VerboseController.say(msg: String, n: Int)
Play has built-in support for Int, Double, Long, Boolean, and UUID parameters.
Play also has built-in support for Option and List parameters in the query string (but not in the path)

Examples:
/option-example             # => MyController.optionExample(None)
/option-example?arg=123     # => MyController.optionExample(Some(123))
/list-example               # => MyController.listExample(Nil)
/list-example?arg=123       # => MyController.listExample(List(123))
/list-example?arg=12&arg=34 # => MyController.listExample(List(12, 34))

Reverse Routing
---------------
Reverse routes are objects that we can use to generate URIs. Play generates reverse routes for us and places them in a controllers.routes package that we can access from our Scala code.

import play.api.mvc.Call

val methodAndUri: Call =
  controllers.routes.HelloController.helloTo("dave")

methodAndUri.method // "GET"
methodAndUrl.url    // "/hello/dave"

PARSING REQUESTS
================

Request bodies
--------------
def exampleAction = Action { request =>
  request.body.asXml match {
    case Some(xml) => // Handle XML
    case None      => BadRequest("That's no XML!")
  }
}

Or:

def exampleAction2 = Action { request =>
  (request.body.asText map handleText) orElse
  (request.body.asJson map handleJson) orElse
  (request.body.asXml  map handleXml)  getOrElse
  BadRequest("You've got me stumped!")
}

def handleText(data: String): Result = ???
def handleJson(data: JsValue): Result = ???
def handleXml(data: NodeSeq): Result = ???

Headers and Cookies
-------------------
object RequestDemo extends Controller {
  def headers = Action { request =>
    val headers: Headers = request.headers
    val ucType: Option[String] = headers.get("Content-Type")
    val lcType: Option[String] = headers.get("content-type")

    val cookies: Cookies = request.cookies
    val cookie: Option[Cookie] = cookies.get("DemoCookie")
    val value: Option[String] = cookie.map(_.value)

    ...
  }
}

Methods and URIs
----------------
// The HTTP method ("GET", "POST", etc):
val method: String = request.method

// The URI, including path and query string:
val uri: String = request.uri

// The path of the URI, without the query string:
val path: String = request.path

// The query string, split into name/value pairs:
val query: Map[String, Seq[String]] = request.queryString

CONSTRUCTING RESULTS
====================

Setting The Status Code
-----------------------
val result1: Result = Ok("Success!")
val result2: Result = NotFound("Is it behind the fridge?")
val result3: Result = Status(401)("Access denied, Dave.")

Adding Content
--------------
the final steps in an Action tend to be as follows:

1. Convert the result of an action to a type that Play can serialize:
*) HTML using a Twirl template, or;
*) a JsValue to return the data as JSON, or;
*) a Scala NodeSeq to return the data as XML, or;
*) a String or Array[Byte].
2. Use the serializable data to create a Result.
3. Tweak HTTP headers and so on.
4. Return the Result.

Tweaking the Result
-------------------
we can change the Content-Type header (without changing the content) using the as method;
we can add and/or alter HTTP headers using withHeaders;
we can add and/or alter cookies using withCookies.


Futures
=======
def ultimateAnswer: Int = {
  // seven and a half million years later...
  42
}

val f: Future[Int] = Future {
  // this code is run asynchronously:
  ultimateAnswer
}
println("Continuing to run in parallel...")

f.onSuccess {
  // register a 'callback', the argument is the value of f
  case number =>
    println("The answer is " + number + ". Now, what was the question?")
}

output:

Continuing to run in parallel...
The answer is 42. Now, what was the question?

/
callback is any executable code that is passed as an argument to other code, which is expected to call back (execute) the argument at a given time. Big drawback: callbacks don't return values! So they are not useful in production code...

COMPOSING FUTURES
=================
1. using map: (The map method allows us to sequence a future with a block of *synchronous* code. )
--------------------------------------------------------------------------------------------------
trait Future[A] {
  def map[B](func: A => B): Future[B] = // ...
}

Example:

def conversion(value: Int): String =
  value.toString

val f1: Future[Int]    = Future { ultimateAnswer }
val f2: Future[Int]    = f1 map { _ + 1 }
val f3: Future[Double] = f1 map { _.toDouble }

val f4: Future[String] = f1 map { _ + 1 } map (conversion) map { _ + "!" }

2. using flatmap: (The flatMap method allows us to sequence a future with a block of *asynchronous* code. )
-----------------------------------------------------------------------------------------------------------
trait Future[A] {
  def flatMap[B](func: A => Future[B]): Future[B] = // ...
}

Example:

def longRunningConversion(value: Int): Future[String] =
  Future {
    // some length of time...
    value.toString
  }

val f1: Future[Int]    = Future(ultimateAnswer)
val f2: Future[String] = f1.flatMap(value => Future(value + 1))
val f3: Future[String] = f1.flatMap(longRunningConversion)

Future is a monad. This means we can use it with regular Scala for-comprehensions.

def getTraffic(hostname: String): Future[Double] = {
  // ...non-blocking HTTP code...
}

SINGLE EXPRESSION

val total: Future[Double] = for {
  t1 <- getTraffic("server1")
  t2 <- getTraffic("server2")
  t3 <- getTraffic("server3")
} yield t1 + t2 + t3

CREATE-THEN-COMPOSE

val traffic1 = getTraffic("server1")
val traffic2 = getTraffic("server2")
val traffic3 = getTraffic("server3")

val total: Future[Double] = for {
  t1 <- traffic1
  t2 <- traffic2
  t3 <- traffic3
} yield t1 + t2 + t3

The create-then-compose takes about 1/3 of the time it takes to execute the single expression!!!!

SEQUENCING FUTURES USING FOR-COMPREHENSIONS
===========================================
1. Work out which calculations are dependent on the results of which others:

poll server 1    \
poll server 2    -+->    total the results
poll server 3    /

2. Declare futures for each independent steps (no incoming arrows) in your graph:

val traffic1 = getTraffic("server1")
val traffic2 = getTraffic("server2")
val traffic3 = getTraffic("server3")

3. Use for-comprehensions to combine the immediate results:

val total: Future[Double] = for {
  t1 <- traffic1
  t2 <- traffic2
  t3 <- traffic3
} yield t1 + t2 + t3

4. Repeat for the next step in the sequence (if any).

FUTURE.SEQUENCE
===============
package scala.concurrent

object Future {
  def sequence[A](futures: Seq[Future[A]]): Future[Seq[A]] =
    // ...
}

We can use this method to convert any sequence of futures into a future containing a sequence of the results.

Example:

def totalTraffic(hostnames: Seq[String]): Future[Double] = {
  val trafficFutures: Seq[Future[Double]] =
    hostnames.map(getTraffic)

  val futureTraffics: Future[Seq[Double]] =
    Future.sequence(trafficFutures)

  futureTraffics.map { (traffics: Seq[Double]) =>
    traffics.sum
  }
}

